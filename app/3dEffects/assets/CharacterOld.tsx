/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 character.glb -t -T
*/

import * as THREE from "three"
import React, { useEffect, useRef, useState } from "react"
import { useGLTF, useAnimations } from "@react-three/drei"
import { GLTF } from "three-stdlib"

type GLTFResult = GLTF & {
  nodes: {
    Cylinder003: THREE.SkinnedMesh
    Dustin: THREE.SkinnedMesh
    Bone: THREE.Bone
  }
  materials: {
    Dustin_Mat: THREE.MeshStandardMaterial
  }
}

type ActionName = "Idle"
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export function Model(props: JSX.IntrinsicElements["group"]) {
  const [name, setName] = useState("jump")

  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF(
    "/character-transformed.glb"
  ) as GLTFResult
  const { actions } = useAnimations<GLTFActions>(animations, group)

  // useEffect(() => {
  //   actions[name]?.reset().fadeIn(0.5).play()
  //   return () => actions[name].fadeOut(0.5)
  // }, [name])

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Dustin_Rig" onClick={(e) => console.log(e)}>
          <primitive object={nodes.Bone} />
          <skinnedMesh
            onClick={(e) => actions.Idle.play()}
            name="Cylinder003"
            geometry={nodes.Cylinder003.geometry}
            material={materials.Dustin_Mat}
            skeleton={nodes.Cylinder003.skeleton}
          />
          <skinnedMesh
            onClick={(e) => actions.Idle.play()}
            name="Dustin"
            geometry={nodes.Dustin.geometry}
            material={materials.Dustin_Mat}
            skeleton={nodes.Dustin.skeleton}
          />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload("/character-transformed.glb")
